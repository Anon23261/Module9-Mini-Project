// Dashboard Data
let dashboardData = {
    totalOperations: 12,
    activeOperations: 5,
    pendingOperations: 3,
    completedOperations: 4,
    tasks: [
        {
            id: 1,
            title: "Security Audit Implementation",
            priority: "critical",
            status: "active",
            dueDate: "2 days",
            description: "Implement comprehensive security audit protocols across all systems.",
            tags: ["Security", "Phase 1"]
        },
        {
            id: 2,
            title: "Network Infrastructure Upgrade",
            priority: "high",
            status: "active",
            dueDate: "5 days",
            description: "Upgrade core network infrastructure to support new security protocols.",
            tags: ["Infrastructure", "Phase 2"]
        }
    ]
};

// Real-time monitoring simulation
function simulateRealTimeUpdates() {
    // Randomly update statistics
    setInterval(() => {
        const randomChange = Math.floor(Math.random() * 3) - 1; // -1, 0, or 1
        dashboardData.activeOperations = Math.max(0, dashboardData.activeOperations + randomChange);
        updateStatistics();
    }, 5000);

    // Simulate new tasks being added
    setInterval(() => {
        if (Math.random() > 0.7) {
            addRandomTask();
        }
    }, 10000);

    // Update task statuses
    setInterval(() => {
        updateRandomTaskStatus();
    }, 7000);
}

// Update statistics display
function updateStatistics() {
    document.getElementById('totalOps').textContent = dashboardData.totalOperations;
    document.getElementById('activeOps').textContent = dashboardData.activeOperations;
    document.getElementById('pendingOps').textContent = dashboardData.pendingOperations;
    document.getElementById('completedOps').textContent = dashboardData.completedOperations;

    // Update progress bars
    updateProgressBars();
}

// Update progress bars
function updateProgressBars() {
    const total = dashboardData.totalOperations;
    const active = (dashboardData.activeOperations / total) * 100;
    const pending = (dashboardData.pendingOperations / total) * 100;
    const completed = (dashboardData.completedOperations / total) * 100;

    document.getElementById('activeProgress').style.width = active + '%';
    document.getElementById('pendingProgress').style.width = pending + '%';
    document.getElementById('completedProgress').style.width = completed + '%';
}

// Add a random task
function addRandomTask() {
    const titles = [
        "Firewall Configuration Update",
        "Database Optimization",
        "Server Maintenance",
        "Security Patch Deployment",
        "Network Performance Audit"
    ];
    const priorities = ["critical", "high", "medium"];
    const statuses = ["active", "pending"];

    const newTask = {
        id: dashboardData.tasks.length + 1,
        title: titles[Math.floor(Math.random() * titles.length)],
        priority: priorities[Math.floor(Math.random() * priorities.length)],
        status: statuses[Math.floor(Math.random() * statuses.length)],
        dueDate: Math.floor(Math.random() * 10 + 1) + " days",
        description: "Automated task generated by system monitoring.",
        tags: ["Automated", "Phase " + Math.floor(Math.random() * 3 + 1)]
    };

    dashboardData.tasks.push(newTask);
    dashboardData.totalOperations++;
    if (newTask.status === "active") dashboardData.activeOperations++;
    if (newTask.status === "pending") dashboardData.pendingOperations++;

    updateTaskList();
    updateStatistics();
}

// Update random task status
function updateRandomTaskStatus() {
    if (dashboardData.tasks.length === 0) return;

    const taskIndex = Math.floor(Math.random() * dashboardData.tasks.length);
    const task = dashboardData.tasks[taskIndex];
    const oldStatus = task.status;
    const statuses = ["active", "pending", "completed"];
    const newStatus = statuses[Math.floor(Math.random() * statuses.length)];

    if (oldStatus !== newStatus) {
        // Update counters
        if (oldStatus === "active") dashboardData.activeOperations--;
        if (oldStatus === "pending") dashboardData.pendingOperations--;
        if (oldStatus === "completed") dashboardData.completedOperations--;

        if (newStatus === "active") dashboardData.activeOperations++;
        if (newStatus === "pending") dashboardData.pendingOperations++;
        if (newStatus === "completed") dashboardData.completedOperations++;

        task.status = newStatus;
        updateTaskList();
        updateStatistics();
    }
}

// Update task list display
function updateTaskList() {
    const taskList = document.getElementById('taskList');
    taskList.innerHTML = '';

    dashboardData.tasks.forEach(task => {
        const priorityClass = {
            critical: 'bg-danger',
            high: 'bg-warning',
            medium: 'bg-info'
        }[task.priority];

        const statusClass = {
            active: 'bg-success',
            pending: 'bg-warning',
            completed: 'bg-secondary'
        }[task.status];

        const taskElement = document.createElement('div');
        taskElement.className = 'list-group-item';
        taskElement.innerHTML = `
            <div class="d-flex w-100 justify-content-between">
                <h6 class="mb-1 text-white">
                    <span class="badge ${priorityClass} me-2">${task.priority}</span>
                    ${task.title}
                </h6>
                <small class="text-muted">Due in ${task.dueDate}</small>
            </div>
            <p class="mb-1">${task.description}</p>
            <small>
                <span class="badge ${statusClass}">${task.status}</span>
                ${task.tags.map(tag => `<span class="badge bg-secondary">${tag}</span>`).join(' ')}
            </small>
        `;

        // Add hover effect
        taskElement.addEventListener('mouseenter', () => {
            taskElement.style.transform = 'translateY(-2px)';
            taskElement.style.transition = 'all 0.3s ease';
        });

        taskElement.addEventListener('mouseleave', () => {
            taskElement.style.transform = 'translateY(0)';
        });

        taskList.appendChild(taskElement);
    });
}

// Initialize monitoring
document.addEventListener('DOMContentLoaded', () => {
    updateStatistics();
    updateTaskList();
    simulateRealTimeUpdates();
});
